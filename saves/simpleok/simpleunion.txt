/* eslint-disable semi */
import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';

// A schema is a collection of type definitions (hence "typeDefs")
// that together define the "shape" of queries that are executed against
// your data.
const typeDefs = `
	union SearchResult = Book | Author

	type Book {
	title: String!
	}

	type Author {
	name: String!
	}

	type Query {
	search(contains: String): [SearchResult!]
	}


`;
// pole objektu s knizky a ten ma predpis jako ISBN
const authors = [
	{
		name: 'Brian W. Aldis',
		titles: ['Nonstop', 'Helikonie I',]

	},

];

// Resolvers define how to fetch the types defined in your schema.
// This resolver retrieves books from the "books" array above.
const resolvers = {
	SearchResult: {
		__resolveType(obj, contextValue, info) {
			// Only Author has a name field
			if (obj.name) {
				return 'Author';
			}
			// Only Book has a title field
			if (obj.title) {
				return 'Book';
			}
			return null; // GraphQLError is thrown
		},
	},
	Query: {
		search: () => authors,
	},

};

function compareBooks(a: any, b: any) {
	if (a.name < b.name) {
		return -1
	}
	else if (b.name < a.name) {
		return 1
	}
	return 0
}

// The ApolloServer constructor requires two parameters: your schema
// definition and your set of resolvers.
const server = new ApolloServer({
	typeDefs,
	resolvers,
});

// Passing an ApolloServer instance to the `startStandaloneServer` function:
//  1. creates an Express app
//  2. installs your ApolloServer instance as middleware
//  3. prepares your app to handle incoming requests
const { url } = await startStandaloneServer(server, {
	listen: { port: 4000 },
});

console.log(`ðŸš€  Server ready at: ${url}`);